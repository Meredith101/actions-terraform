name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  buildAndTest:
    name: CI Pipeline
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      DB_HOST: localhost
      POSTGRES_USER: test
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test_db

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2

      - name: Set up PostgreSQL
        uses: Harmon758/postgresql-action@v1
        with:
          postgresql version: '13'
          postgresql db: ${{ env.POSTGRES_DB }}
          postgresql user: ${{ env.POSTGRES_USER }}
          postgresql password: ${{ env.POSTGRES_PASSWORD }}

      - name: Install Angular dependencies
        run: npm ci

      - name: Run Angular Tests
        run: npm run test:coverage

      - name: Install Express dependencies
        run: npm --prefix ./server ci

      - name: Run Linting
        run: npm --prefix ./server run lint

      - name: Run Migration
        run: npm --prefix ./server run migrate

      - name: Run Express Tests
        run: npm --prefix ./server run coverage

  push:
    runs-on: ubuntu-latest
    needs: buildAndTest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: "sams"
          IMAGE_TAG: "sams-image"
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: push
    env:
      CONTAINER_REGISTRY_URL: "664047078509.dkr.ecr.eu-west-2.amazonaws.com/sams"
      CONTAINER_REPOSITORY_NAME: "sams"
      S3_DEPLOY_BUCKET: "meredith-bucket"
      ELASTIC_BEANSTALK_APP_NAME: "sams-eb-app"
      ELASTIC_BEANSTALK_ENV_NAME: "sams-eb-env"

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set permissions for create_dockerrun.sh
        run: chmod +x ./aws/create_dockerrun.sh

      - name: Create Dockerrun.aws.json
        run: ./create_dockerrun.sh
        working-directory: ./aws
        env:
          CONTAINER_REGISTRY_URL: ${{ env.CONTAINER_REGISTRY_URL }}
          CONTAINER_REPOSITORY_NAME: ${{ env.CONTAINER_REPOSITORY_NAME }}
          GITHUB_SHA: ${{ github.sha }}

      - name: Copy Dockerrun.aws.json to S3
        run: aws s3 cp ./aws/Dockerrun.aws.json "s3://$S3_DEPLOY_BUCKET"

      - name: Deploy new application version to Elastic Beanstalk
        run: |
          echo "üîÑ Checking if Elastic Beanstalk application exists..."
          if ! aws elasticbeanstalk describe-applications --application-names "$ELASTIC_BEANSTALK_APP_NAME" >/dev/null 2>&1; then
            echo "üöÄ Creating Elastic Beanstalk application: $ELASTIC_BEANSTALK_APP_NAME"
            aws elasticbeanstalk create-application --application-name "$ELASTIC_BEANSTALK_APP_NAME"

            echo "‚è≥ Waiting for application to become fully ready..."
            for i in {1..10}; do
              APP_CHECK=$(aws elasticbeanstalk describe-applications \
                --query "Applications[?ApplicationName=='$ELASTIC_BEANSTALK_APP_NAME'].ApplicationName" \
                --output text)

              if [ "$APP_CHECK" = "$ELASTIC_BEANSTALK_APP_NAME" ]; then
                echo "‚úÖ Application is now fully available"
                break
              fi

              echo "‚è≥ Still waiting... ($i/10)"
              sleep 5
            done
          else
            echo "‚úÖ Application exists: $ELASTIC_BEANSTALK_APP_NAME"
          fi

          echo "üì¶ Creating new application version"
          TRIES=0
          MAX_TRIES=5
          until aws elasticbeanstalk create-application-version \
            --application-name "$ELASTIC_BEANSTALK_APP_NAME" \
            --version-label "$GITHUB_SHA" \
            --source-bundle S3Bucket="$S3_DEPLOY_BUCKET",S3Key="Dockerrun.aws.json"; do
            echo "‚è≥ Waiting for Elastic Beanstalk application to become available..."
            TRIES=$((TRIES + 1))
            if [ $TRIES -ge $MAX_TRIES ]; then
              echo "‚ùå Failed to create application version after $MAX_TRIES attempts."
              exit 1
            fi
            sleep 5
          done

          echo "üîÑ Checking if Elastic Beanstalk environment exists..."
          ENV_EXISTS=$(aws elasticbeanstalk describe-environments \
            --application-name "$ELASTIC_BEANSTALK_APP_NAME" \
            --environment-names "$ELASTIC_BEANSTALK_ENV_NAME" \
            --query "Environments[?Status != 'Terminated'].EnvironmentName" \
            --output text)

          if [ "$ENV_EXISTS" != "$ELASTIC_BEANSTALK_ENV_NAME" ]; then
            echo "üöÄ Creating Elastic Beanstalk environment: $ELASTIC_BEANSTALK_ENV_NAME"
            aws elasticbeanstalk create-environment \
              --application-name "$ELASTIC_BEANSTALK_APP_NAME" \
              --environment-name "$ELASTIC_BEANSTALK_ENV_NAME" \
              --solution-stack-name "64bit Amazon Linux 2 v3.6.0 running Docker" \
              --version-label "$GITHUB_SHA" \
              --option-settings Namespace=aws:autoscaling:launchconfiguration,OptionName=InstanceType,Value=t2.micro \
                               Namespace=aws:elasticbeanstalk:environment,OptionName=EnvironmentType,Value=SingleInstance \
                               Namespace=aws:elasticbeanstalk:application:environment,OptionName=ENV,Value=production
          else
            echo "‚úÖ Environment exists: $ELASTIC_BEANSTALK_ENV_NAME"
            echo "üöÄ Updating environment with new version"
            aws elasticbeanstalk update-environment \
              --application-name "$ELASTIC_BEANSTALK_APP_NAME" \
              --environment-name "$ELASTIC_BEANSTALK_ENV_NAME" \
              --version-label "$GITHUB_SHA"
